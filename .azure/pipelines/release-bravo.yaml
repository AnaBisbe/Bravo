trigger: none

strategy:
  matrix:
    bravo-x64:
      arch: 'x64'
      selfcontained: 'true'
      artifact: 'Bravo.$(AppVersionMajor).$(AppVersionMinor).$(AppVersionPatch).x64'
#    bravo-x64-frameworkdependant:
#      arch: 'x64'
#      selfcontained: 'false'
#      artifact: 'Bravo.$(AppVersionMajor).$(AppVersionMinor).$(AppVersionPatch).x64-frameworkdependant'

pool:
  vmImage: 'windows-2022'

variables:
  configuration: 'Release'
  datePath: $[format('{0:yyyy}/{0:MM}/{0:dd}', pipeline.startTime)]

steps:
- task: Assembly-Info-NetCore@3
  displayName: 'Update AssemblyInfo'
  inputs:
    Path: '$(Build.SourcesDirectory)'
    FileNames: 'src\Bravo.csproj'
    InsertAttributes: true
    FileEncoding: 'auto'
    WriteBOM: false
    VersionNumber: '$(AppVersionMajor).$(AppVersionMinor).*.*'
    InformationalVersion: '$(AppVersionInformationalVersion)'
    UpdateBuildNumber: '$(Build.BuildNumber)-$(AppVersionMajor).$(AppVersionMinor).*.*'
    LogLevel: 'verbose'
    FailOnWarning: true
    DisableTelemetry: true
- task: UseDotNet@2
  displayName: 'Use .NET 5.0 SDK'
  inputs:
    packageType: sdk
    version: 5.0.x
- task: DotNetCoreCLI@2
  displayName: '.NET publish'
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: 'src\Bravo.csproj'
    arguments: '--configuration $(configuration) --self-contained $(selfcontained) --output "$(Build.BinariesDirectory)" --verbosity Normal --force --nologo'
    zipAfterPublish: false
    modifyOutputPath: false
- task: DotNetCoreCLI@2
  displayName: 'Install AzureSignTool'
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'update --global azuresigntool'
- task: CmdLine@2
  displayName: 'Code signing EXE'
  inputs:
    script: 'AzureSignTool sign -kvu "$(SigningVaultURL)" -kvt "$(SigningTenantId)" -kvi "$(SigningClientId)" -kvs "$(SigningClientSecret)" -kvc "$(SigningCertName)" -tr http://timestamp.digicert.com -v "$(Build.BinariesDirectory)\Bravo.exe"'
    failOnStderr: true
- task: CmdLine@2
  displayName: 'WiX harvest components'
  inputs:
    script: '"%WIX%bin\heat.exe" dir "$(Build.BinariesDirectory)" -gg -scom -srd -sreg -sfrag -template fragment -cg ComponentsAutogenerated -dr INSTALLFOLDER -var var.PublishFolder -t Bravo.xslt -out Components.wxs'
    workingDirectory: '$(Build.SourcesDirectory)\installer\wix\src\Bravo'
    failOnStderr: true
- task: CmdLine@2
  displayName: 'WiX compile components'
  inputs:
    script: '"%WIX%bin\candle.exe" Components.wxs -dPublishFolder="$(Build.BinariesDirectory)" -arch "$(arch)"'
    workingDirectory: '$(Build.SourcesDirectory)\installer\wix\src\Bravo'
    failOnStderr: true
- task: CmdLine@2
  displayName: 'WiX compile app'
  inputs:
    script: '"%WIX%bin\candle.exe" Bravo.wxs -dPublishFolder="$(Build.BinariesDirectory)" -dVersion="$(AppVersionInformationalVersion)" -arch "$(arch)"'
    workingDirectory: '$(Build.SourcesDirectory)\installer\wix\src\Bravo'
    failOnStderr: true
- task: CmdLine@2
  displayName: 'WiX linker MSI'
  inputs:
    # -sice:ICE60 is used to ignore -> warning LGHT1076 : ICE60: The file filE8E88FBC49DC5621FF3FC1B65ADCCB39 is not a Font, and its version is not a companion file reference. It should have a language specified in the Language column.
    # -sice:ICE61 is used to ignore -> warning LGHT1076 : ICE61: This product should remove only older versions of itself. The Maximum version is not less than the current product.
    # -sice:ICE80 is used to ignore -> error LGHT0204 : ICE80: This 64BitComponent pbitool.json uses 32BitDirectory POWERBIEXTERNALTOOLSFOLDER
    script: '"%WIX%bin\light.exe" Bravo.wixobj Components.wixobj -ext WixUIExtension.dll -ext WixUtilExtension.dll -dPublishFolder="$(Build.BinariesDirectory)" -cultures:en-us -loc Bravo-en-us.wxl -out "$(Build.ArtifactStagingDirectory)\$(artifact).msi" -spdb -sice:ICE60 -sice:ICE61 -sice:ICE80'
    workingDirectory: '$(Build.SourcesDirectory)\installer\wix\src\Bravo'
    failOnStderr: true
- task: CmdLine@2
  displayName: 'Code signing MSI'
  inputs:
    script: 'AzureSignTool sign -kvu "$(SigningVaultURL)" -kvt "$(SigningTenantId)" -kvi "$(SigningClientId)" -kvs "$(SigningClientSecret)" -kvc "$(SigningCertName)" -tr http://timestamp.digicert.com -v "$(Build.ArtifactStagingDirectory)\$(artifact).msi"'
    failOnStderr: true
- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts to DevOps Pipeline'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
- task: AzureFileCopy@2
  displayName: 'Copy artifacts to Azure Storage'
  inputs:
    SourcePath: '$(Build.ArtifactStagingDirectory)'
    azureSubscription: '$(AzureSubscriptionName)'
    Destination: 'AzureBlob'
    storage: '$(AzurePublishStorageAccountName)'
    ContainerName: '$(AzurePublishStorageContainerName)'
    BlobPrefix: '$(datePath)/$(Build.BuildNumber)'